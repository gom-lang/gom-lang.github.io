---
import BaseLayout from "./../layouts/Base.astro";
import { Content as LanguageDocs } from "./../content/language.md";
---

<BaseLayout>
  <div class="max-w-3xl mx-auto p-6 sm:p-12">
    <h1 class="text-5xl font-bold mb-4">
      The <span class="gom-name"><em>Gom</em></span> Programming Language
    </h1>
    <p class="source-serif-4-regular">
      Gom is a statically typed, compiled programming language based on a
      mixture of TypeScript and Rust syntax. The Gom compiler uses LLVM and the
      frontend generates LLVM IR. It takes inspiration from AssemblyScript and
      makes it more approachable to learn
      <em
        ><a
          class="underline gom-name"
          href="https://compiler-in-typescript.mohitkarekar.com/welcome/start/"
          target="_blank">compiler construction</a
        ></em
      >.
    </p>
    <p class="mt-4">
      A <em
        ><select
          name="program"
          id="program"
          class="border-2 border-[#0a7256] rounded"
        >
          <option value="hello-world">hello world program</option>
          <option value="loop">program with loops</option>
          <option value="recursion">recursive function</option>
        </select></em
      > in Gom looks like following, go ahead, run it (you can also edit the code):
    </p>
    <div class="mt-4 relative" id="editor">
      <button
        class="absolute top-0 right-0 bg-gray-400 text-white p-2 pl-4 pr-4 cursor-pointer z-10 text-sm hover:bg-gray-500 transition-colors"
        style="font-family: Geist Mono;"
        id="run"
      >
        ▶ Run
      </button>
    </div>
    <div class="mt-4 p-4 bg-gray-100 text-gray-800">
      <pre id="output" class="text-sm">→ Logs will appear here</pre>
    </div>

    <h2 class="text-3xl font-bold mt-8">
      Language <em style="color:#0a7256">Features</em>
    </h2>
    <LanguageDocs />
  </div>
  <script>
    import { javascript } from "@codemirror/lang-javascript";
    import { EditorState, type Extension } from "@codemirror/state";
    import { basicSetup } from "codemirror";
    import { EditorView, keymap } from "@codemirror/view";
    import { ayuLight } from "thememirror";
    import { indentWithTab } from "@codemirror/commands";

    const PROGRAMS = {
      "hello-world": `import io;

fn main() {
  io.log("Hello, World!");
}`,
      loop: `import io;

fn main() {
    let i = 0;
    for (i = 0; i < 10; i = i + 1) {
        io.log("i: ", i);
    }
}`,
      recursion: `import io;

fn power_n(x: int, n: int): int {
    if (n == 0) {
        return 1;
    }
    return x * power_n(x, n - 1);
}

fn main() {
    io.log("Hello, World!");
    io.log("2^3 = ", power_n(2, 3));
}`,
    };
    // codemirror editor
    const extensions: Extension[] = [
      basicSetup,
      keymap.of([indentWithTab]),
      ayuLight,
      javascript(),
    ];
    let startState = EditorState.create({
      doc: PROGRAMS["hello-world"],
      extensions,
    });
    const editor = new EditorView({
      state: startState,
      parent: document.querySelector("#editor")!,
    });

    const program = document.querySelector("#program") as HTMLSelectElement;
    const output = document.querySelector("#output")!;
    program.addEventListener("change", onProgramChange);

    function onProgramChange() {
      const selectedProgram = program.value;
      editor.dispatch({
        changes: {
          from: 0,
          to: editor.state.doc.length,
          insert: PROGRAMS[selectedProgram as keyof typeof PROGRAMS],
        },
      });
      output.textContent = "→ Logs will appear here";
    }

    function runCode() {
      const code = editor.state.doc.toString();
      const URL = "https://gom-compiler.mohitkarekar.com/api/compile";
      const myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");

      const raw = JSON.stringify({
        src: code,
      });

      const requestOptions = {
        method: "POST",
        headers: myHeaders,
        body: raw,
      };
      output.textContent = "Running...";
      fetch(URL, requestOptions)
        .then((response) => {
          output.textContent = `# Compiled in ${response.headers.get(
            "X-Compile-Time"
          )}ms\n\n`;
          return response;
        })
        .then((response) => response.text())
        .then((result) => {
          output.textContent += result;
        })
        .catch((error) => {
          console.log("error", error);
          output.textContent = "Error: " + error;
        });
    }
    document.querySelector("#run")!.addEventListener("click", runCode);
  </script>
</BaseLayout>
