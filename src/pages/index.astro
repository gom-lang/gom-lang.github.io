---
import BaseLayout from "./../layouts/Base.astro";
import { EditorView } from "@codemirror/view";
---

<BaseLayout>
  <div class="max-w-3xl mx-auto p-12">
    <h1 class="text-5xl font-bold mb-4">
      The <span class="gom-name"><em>Gom</em></span> Programming Language
    </h1>
    <p class="source-serif-4-regular">
      Gom is a statically typed, compiled programming language based on a
      mixture of TypeScript and Rust syntax. The Gom compiler uses LLVM and the
      frontend generates LLVM IR. It takes inspiration from AssemblyScript and
      makes it more approachable to learn
      <em
        ><a
          class="underline gom-name"
          href="https://compiler-in-typescript.mohitkarekar.com/welcome/start/"
          target="_blank">compiler construction</a
        ></em
      >.
    </p>
    <p class="mt-4">
      A <em>hello world program</em> in Gom looks like following (you'll soon be
      able to run it):
    </p>
    <div class="mt-4 relative" id="editor">
      <button
        class="absolute top-0 right-0 bg-gray-400 text-white p-2 pl-4 pr-4 cursor-pointer z-10 text-sm hover:bg-gray-500 transition-colors"
        style="font-family: Geist Mono;"
        id="run"
      >
        ▶ Run
      </button>
    </div>
    <div class="mt-4 p-4 bg-gray-100 text-gray-800">
      <pre id="output" class="text-sm">→ Logs will appear here</pre>
    </div>
  </div>
  <script>
    import { javascript } from "@codemirror/lang-javascript";
    import { EditorState, type Extension } from "@codemirror/state";
    import { basicSetup } from "codemirror";
    import { EditorView, keymap } from "@codemirror/view";
    import { ayuLight } from "thememirror";
    import { indentWithTab } from "@codemirror/commands";

    // codemirror editor
    const extensions: Extension[] = [
      basicSetup,
      keymap.of([indentWithTab]),
      ayuLight,
      javascript(),
    ];
    let startState = EditorState.create({
      doc: `import io;

fn echo(a: int): int {
  return a;
}

fn main() {
  io.log("Hello, World!");
}`,
      extensions,
    });
    const editor = new EditorView({
      state: startState,
      parent: document.querySelector("#editor")!,
    });

    function runCode() {
      const code = editor.state.doc.toString();
      const output = document.querySelector("#output")!;
      const URL = "https://gom-compiler.mohitkarekar.com/api/compile";
      const myHeaders = new Headers();
      myHeaders.append("Content-Type", "application/json");

      const raw = JSON.stringify({
        src: code,
      });

      const requestOptions = {
        method: "POST",
        headers: myHeaders,
        body: raw,
      };
      output.textContent = "Running...";
      fetch(URL, requestOptions)
        .then((response) => response.text())
        .then((result) => {
          output.textContent = result;
        })
        .catch((error) => {
          console.log("error", error);
          output.textContent = "Error: " + error;
        });
    }
    document.querySelector("#run")!.addEventListener("click", runCode);
  </script>
</BaseLayout>
